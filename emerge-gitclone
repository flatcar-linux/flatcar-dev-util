#!/usr/bin/python3

import os
import shutil
import subprocess
import sys

import portage

# Find the version of the currently running release.
release = False
with open('/usr/share/flatcar/release') as release_file:
	for line in release_file:
		if line.startswith('FLATCAR_RELEASE_VERSION='):
			release = line.split('=', 1)[1].strip()

# Attempt to read Git commits from this release's manifest.
commits = {}
if release:
	if "+" in release:
		dev_build_tag = release.split("+")[1]
		manifest = "https://raw.githubusercontent.com/kinvolk/manifest-builds/%s/%s.xml" % (dev_build_tag, dev_build_tag)
	else:
		manifest = "https://raw.githubusercontent.com/kinvolk/manifest/v%s/release.xml" % release
	try:
		from xml.dom.minidom import parseString as pxs
		from urllib import request as req
		for repo in pxs(req.urlopen(manifest).read()).getElementsByTagName('project'):
			commits[repo.getAttribute('name')] = repo.getAttribute('revision')
	except Exception:
		print(">>> Failed to read manifest commits for %s" % release)
		sys.exit(1)

synced = False
eroot = portage.settings['EROOT']
for repo in portage.db[eroot]['vartree'].settings.repositories:
	if repo.sync_type != 'git':
		continue
	commit = commits.get(repo.sync_uri.replace('//', '').replace('.git', '').split('/', 1)[-1])

	# If commit points to a branch name starting with "refs/heads",
	# "refs/heads/flatcar-build-x", then we cannot simply get its
	# commit with the name, because the branch was not checked out.
	# In that case we need to make the commit point to the exact
	# remote branch name, like "refs/remotes/origin/flatcar-build-x".
	if commit:
		commit = commit.replace('refs/heads/', 'refs/remotes/origin/')
	else:
		print("Warning: No revision found for " + repo.sync_uri)

	print(">>> Cloning repository '%s' from '%s'..." % (repo.name, repo.sync_uri))

	if os.path.isdir(repo.location):
		shutil.rmtree(repo.location)
	elif os.path.lexists(repo.location):
		os.unlink(repo.location)

	print('>>> Starting git clone in %s' % repo.location)
	os.umask(0o022)
	subprocess.check_call(['git', 'clone', repo.sync_uri, repo.location])
	print('>>> Git clone in %s successful' % repo.location)
	if commit:
		if commit.startswith('refs/pull/'):
			pull=commit.removeprefix('refs/')
			nr=commit.removeprefix('refs/pull/').removesuffix('/head')
			subprocess.check_call(['git', '-C', repo.location, 'fetch', 'origin', pull])
			subprocess.check_call(['git', '-C', repo.location, 'checkout', '-b', 'pr{}'.format(nr), 'FETCH_HEAD'])
		else:
			subprocess.check_call(['git', '-C', repo.location, 'checkout', commit])
		print('>>> Release checkout %s in %s successful' % (commit, repo.location))
	synced = True

if synced:
	# Perform normal post-sync tasks
	configroot = portage.settings['PORTAGE_CONFIGROOT']
	post_sync = '%s/etc/portage/bin/post_sync' % configroot
	if os.path.exists(post_sync):
		subprocess.check_call([post_sync])
	subprocess.check_call(['emerge', '--check-news', '--quiet'])
else:
	sys.stderr.write('>>> No git repositories configured.\n')
	sys.exit(1)
