#!/usr/bin/python3

import os
import shutil
import subprocess
import sys

import portage


GIT_URI = "https://github.com/flatcar-linux/{repo}.git"
GIT_LOCATION = "/var/lib/portage/{repo}"


def get_release():
    """Return the version of the currently running release."""
    release = False
    with open("/usr/share/flatcar/release") as release_file:
        for line in release_file:
            if line.startswith("FLATCAR_RELEASE_VERSION="):
                release = line.split("=", 1)[1].strip()

    return release


def get_channel():
    """Return the channel for the current deployment"""
    channel = None
    with open("/usr/share/flatcar/update.conf") as update_conf:
        for line in update_conf:
            if line.startswith("GROUP"):
                channel = line.split("=", 1)[1].strip()

    return channel


def git_clone_repo(repo_url, repo_location):
    """Clone the given repo at the given location"""
    print(f">>> Starting git clone in {repo_location}")
    os.umask(0o022)
    subprocess.check_call(
        ["git", "clone", "--recurse-submodules", repo_url, repo_location]
    )
    print(f">>> Git clone in {repo_location} successful")


def sync_repo():
    release = get_release()
    channel = get_channel()
    ref = f"{channel}-{release}"

    repo_list = ["scripts", "coreos-overlay", "portage-stable"]

    for repo in repo_list:
        if os.path.isdir(GIT_LOCATION.format(repo=repo)) and not os.path.islink(
            GIT_LOCATION.format(repo=repo)
        ):
            shutil.rmtree(GIT_LOCATION.format(repo=repo))
        if os.path.lexists(GIT_LOCATION.format(repo=repo)):
            os.unlink(GIT_LOCATION.format(repo=repo))

        if repo == "scripts":
            git_clone_repo(
                repo_url=GIT_URI.format(repo=repo),
                repo_location=GIT_LOCATION.format(repo=repo),
            )

            subprocess.check_output(
                [
                    "git",
                    "-C",
                    GIT_LOCATION.format(repo=repo),
                    "checkout",
                    "--recurse-submodules",
                    ref,
                ]
            )
        else:
            print(f">>> Symlink the repository with the appropriate folder - {repo}")
            os.symlink(
                GIT_LOCATION.format(repo="scripts")
                + f"/sdk_container/src/third_party/{repo}",
                GIT_LOCATION.format(repo=repo),
            )


def main():
    try:
        sync_repo()
        # Perform normal post-sync tasks
        configroot = portage.settings["PORTAGE_CONFIGROOT"]
        post_sync = "%s/etc/portage/bin/post_sync" % configroot
        if os.path.exists(post_sync):
            subprocess.check_call([post_sync])
        subprocess.check_call(["emerge", "--check-news", "--quiet"])
    except Exception as e:
        print(e.output)
        sys.stderr.write(">>> No git repositories configured.\n")
        sys.exit(1)


if __name__ == "__main__":
    main()
